import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import tkinter as tk
from tkinter import messagebox
import time
from scipy import ndimage
from scipy.signal import find_peaks

class AdvancedProteinModel:
    def __init__(self):
        # Базовые параметры модели
        self.r0 = 4.2          # Оптимальное расстояние (Å)
        self.theta0 = 15.0     # Оптимальный угол (градусы)
        self.E0 = 16.7         # Энергетическая константа (кДж/моль)
        self.k_B = 0.008314    # Постоянная Больцмана (кДж/(моль·K))
        
        # Параметры для анализа критических зон
        self.critical_threshold = 2.5  # Порог для определения критических зон
        self.anomaly_threshold = 3.0   # Порог для аномальных зон
        
        # Параметры визуализации
        self.resolution = 50    # Разрешение сетки
        
    def calculate_energy(self, r, theta):
        """Расчет свободной энергии с улучшенной моделью"""
        # Гидрофобные взаимодействия
        Gh = self.E0 * (1 - np.tanh((r - self.r0)/1.5))
        
        # Ионные взаимодействия
        Gion = 23.19 * (1 - np.cos(2*np.radians(theta) - np.radians(self.theta0)))
        
        # Квантовые эффекты
        Gqft = 5.62 * (1 / (r**3 + 0.1))  # Регуляризация для малых r
        
        return Gh + Gion + Gqft
    
    def calculate_rate(self, r, theta, T=310):
        """Скорость изменения белковых связей (1/нс)"""
        energy = self.calculate_energy(r, theta)
        return np.exp(-energy / (self.k_B * T))
    
    def find_critical_zones(self, energy_field):
        """Выявление критических и аномальных зон"""
        # Градиент энергии
        grad = np.gradient(energy_field)
        grad_magnitude = np.sqrt(grad[0]**2 + grad[1]**2)
        
        # Критические зоны (высокий градиент)
        critical_zones = grad_magnitude > self.critical_threshold
        
        # Аномальные зоны (особые точки)
        anomalies = np.zeros_like(energy_field, dtype=bool)
        
        # Находим локальные максимумы
        peaks, _ = find_peaks(energy_field.flatten(), height=self.anomaly_threshold)
        anomalies.flat[peaks] = True
        
        return critical_zones, anomalies
    
    def create_3d_plot(self, plot_type='energy'):
        """Создание интерактивного 3D графика"""
        # Генерация сетки
        r = np.linspace(2, 8, self.resolution)
        theta = np.linspace(-30, 60, self.resolution)
        R, Theta = np.meshgrid(r, theta)
        
        # Расчет параметров
        Energy = self.calculate_energy(R, Theta)
        Rate = self.calculate_rate(R, Theta)
        Critical, Anomalies = self.find_critical_zones(Energy)
        
        # Настройка фигуры
        fig = plt.figure(figsize=(14, 8))
        
        if plot_type == 'energy':
            # График энергии с критическими зонами
            ax = fig.add_subplot(111, projection='3d')
            surf = ax.plot_surface(R, Theta, Energy, cmap='viridis', alpha=0.8)
            
            # Добавляем критические зоны
            critical_energy = np.ma.masked_where(~Critical, Energy)
            ax.plot_surface(R, Theta, critical_energy, cmap='autumn', alpha=0.5)
            
            ax.set_title('Свободная энергия белковых взаимодействий\nКрасным выделены критические зоны')
            zlabel = 'Энергия (кДж/моль)'
            
        elif plot_type == 'rate':
            # График скорости изменений
            ax = fig.add_subplot(111, projection='3d')
            surf = ax.plot_surface(R, Theta, Rate, cmap='plasma')
            
            # Добавляем аномальные зоны
            anomaly_rate = np.ma.masked_where(~Anomalies, Rate)
            ax.scatter(R[Anomalies], Theta[Anomalies], anomaly_rate[Anomalies], 
                      color='red', s=50, label='Аномальные точки')
            
            ax.set_title('Скорость изменения белковых связей\nКрасные точки - аномальные зоны')
            zlabel = 'Скорость (1/нс)'
            
        elif plot_type == 'analysis':
            # Комплексный анализ
            fig = plt.figure(figsize=(16, 6))
            
            # 1. Энергия
            ax1 = fig.add_subplot(131, projection='3d')
            surf1 = ax1.plot_surface(R, Theta, Energy, cmap='viridis')
            ax1.set_title('Свободная энергия')
            ax1.set_zlabel('Энергия (кДж/моль)')
            
            # 2. Скорость
            ax2 = fig.add_subplot(132, projection='3d')
            surf2 = ax2.plot_surface(R, Theta, Rate, cmap='plasma')
            ax2.set_title('Скорость изменений')
            ax2.set_zlabel('Скорость (1/нс)')
            
            # 3. Критические зоны
            ax3 = fig.add_subplot(133)
            crit_map = np.zeros_like(Energy)
            crit_map[Critical] = 1
            crit_map[Anomalies] = 2
            contour = ax3.contourf(R, Theta, crit_map, levels=[-0.5, 0.5, 1.5, 2.5], 
                                  cmap='jet', alpha=0.7)
            ax3.set_title('Критические (синие) и аномальные (красные) зоны')
            
            plt.tight_layout()
            plt.show()
            return
            
        # Общие настройки для одиночных графиков
        ax.set_xlabel('Расстояние (Å)')
        ax.set_ylabel('Угол (°)')
        ax.set_zlabel(zlabel)
        fig.colorbar(surf, ax=ax, shrink=0.5, aspect=10, label=zlabel)
        
        plt.tight_layout()
        plt.show()

def show_info():
    """Показ информационного сообщения"""
    root = tk.Tk()
    root.withdraw()
    message = """Обобщенная модель белковой динамики:
    
1. График энергии показывает стабильность связей
2. Критические зоны - области резких изменений
3. Аномальные зоны - потенциально нестабильные участки
4. Скорость изменений - динамика перестроек связей

Закройте окно графика для завершения."""
    messagebox.showinfo("Инструкция", message)
    root.destroy()

def main():
    try:
        # Проверка зависимостей
        try:
            import numpy as np
            import matplotlib.pyplot as plt
        except ImportError:
            import subprocess
            import sys
            subprocess.check_call([sys.executable, "-m", "pip", "install", 
                                 "numpy", "matplotlib", "scipy"])
        
        show_info()
        
        # Создание и настройка модели
        model = AdvancedProteinModel()
        model.resolution = 60  # Повышение точности
        
        print("Анализ белковой динамики...")
        time.sleep(1)
        
        # Запуск комплексной визуализации
        model.create_3d_plot('analysis')
        
        # Дополнительные графики (можно раскомментировать)
        # model.create_3d_plot('energy')
        # model.create_3d_plot('rate')
        
    except Exception as e:
        root = tk.Tk()
        root.withdraw()
        messagebox.showerror("Ошибка", f"Ошибка выполнения:\n\n{str(e)}\n\n"
                             "1. Убедитесь в установке Python 3.x\n"
                             "2. При установке отметьте 'Add Python to PATH'")
        root.destroy()

if __name__ == "__main__":
    main()
